install.packages("BayesFactor")
install.packages("MCMCpack")
choose(4,40)
choose(4,4)
choose(4,3)
n = 10
binom.func <- function(n, theta){
out <- vector(length = n+1)
for(x in 0:n){
out[x+1] <- choose(n, x)*(theta^x)*((1-theta)^(n-x))
}
out
}
theta <- seq(0,1,by = .01)
test <- binom.func(n, theta)
test <- sapply(theta, binom.func(n = 10, theta))
test <- sapply(theta, function(i){binom.func(n = n, theta = i)})
plot(test)
test
theta<- seq(0,1,.01)
dbinom(0:10, 10, .5)
plot(dbinom(0:10, 10, .5))
gamma(0)
gamma(1)
gamma(2)
log(2)
log(5)
log(.2)
log(.4)
log(1/.4)
log(1/4)
install.packages("swirl")
package_version("swirl")
library("swirl")
package_version("swirl")
packageVersion("swirl")
install_course("The R Programming Environment")
swirl()
5+7
x <- 5 + 7
x
y <- x-3
y
z<-c(1.1,9,3.14)
?c()
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
1:20
pi:10
15:1
?`:'`
?':'
seq(1,20)
seq(0,10,by=.5)
seq(5,10,lenght=30)
seq(5,10,length=30)
my_Seq <-seq(5,10,lenght=30)
my_seq <-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times = 10)
rep(c(0,1,2), each  = 10)
bye()
library("swirl")
swirl()
num_vect <- numeric(.5,55,-10,6)
num_vect <- numeric(c(.5,55,-10,6))
bye()
swirl()
play()
nxt()
info()
main()
num_vect <- c(.5,55,-10,6)
tf <- num_vec < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_ch)
paste(my_char, collapse = " ")
c(my_char, "yeti")
my_name <- c(my_char, "yeti")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X" "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_Data <- sample(c(y,z),100)
my_data <- sample(c(y,z),100)
my<-na<-is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
library("swirl")
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c (foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector
)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my)
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix,my_matrix2)
patients <- c( "Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating ", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 ==7
6 < 7
10 <=10
5 != 7
!(5!=7)
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FA)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8  || 6 !=8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints < 0)
all(ints > 0)
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path(c("folder1", "folder2"))
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = T)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
library(readr)
datapath
print(datapath)
datafile <- file.path(datapath, "urban.csv.gz")
urban <- read_csv(datafile)
urban
head(urban)
urban <- read_csv(datafile, col_types = c(c,c,c,d,c))
urban <- read_csv(datafile, col_types = c("c", "c", "c", "d", "c"))
urban <- read_csv(datafile, col_types = c("cccdc"))
info()
urban <- read_csv(datafile, col_types = c("cccdc"))
urban <- read_csv(datafile, col_types = c("ccc"))
urban <- read_csv(datafile, col_types = c("ccccc"))
urban <- read_csv(datafile, col_types = "cccdc")
urban <- read_csv(datafile, col_types = "cccd/")
urban <- read_csv(datafile, col_types = "cccd_/-")
urban <- read_csv(datafile, col_types = "cccd_")
urban <- read_csv(datafile, col_types = "cccd-")
head(urban)
urban <- read_csv(datafile, col_types = "cccd-", n_max = 100)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, n = 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
info()
play()
head(worldcup)
str(worldcup)
?dplyr
?tidyr
stocks <- tibble(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
gather(stocks, stock, price, -time)
stocks %>% gather(stock, price, -time)
stocks
xx <- gather(stocks, stock, price, -time)
xx
class(x)
class(xx)
str(xx)
View(xx)
View(xx)
nxt()
submit()
submit()
submit()
submit()
submit()
play()
mtcars %>%
summarise(mean = mean(disp), n = n())
nxt()
submit()
submit()
submit()
submit()
submit()
submit()
str(titanic)
submit
submit()
submit()
submit()
submit()
submit()
play()
mtcars %>% as_tibble() %>% mutate(
cyl2 = cyl * 2,
cyl4 = cyl2 * 2
)
x<-1:10
factor(x)
factor(x, levels = c("15 to 50" = 3:4, "else" = 1:2))
factor(x, levels = c(3:4 = "boe", 1:2 = "dan"))
x
factor(x, levels = 3)
factor(x, levels = c(0:2, 3:5,6:10))
nxt()
submit()
submit()
submit()
cut(titanic_2$Age, c(15,50))
play()
cut(rep(1,5), 4)
str(titanic_2$Age)
nxt()
submit()
submit()
submit()
reset()
reset()
swirl()
submit()
submit()
submit()
submit()
submit()
play()
group_by(titanic_3, Pclass, agecat, Sex, add = TRUE)
group_by(titanic_3, Pclass)
nxt()
submit()
play()
titanic_3 %>% arrange(Pclass, agecat, Sex, by_group = TRUE)
titanic_3 %>% arrange(Pclass, agecat, Sex)
titanic_3 %>% arrange(Pclass, agecat, Sex) %>% summarise(N = n())
titanic_3 %>% group_by(Pclass, agecat, Sex, add = TRUE)%>% summarise(N= n())
nxt()
submit()
x <- "Hello world!"
x <- "Hello World!"
x
paste( "Square", "Circle", "Triangle")
paste( "Square", "Circle", "Triangle", sep = "+")
play()
paste(c("Yes", "No"), sep = "_")
nxt()
paste0( "Square", "Circle", "Triangle")
shapes <- c("Square", "Circle", "Triangle")
paste( "My favorite shape is a", shapes)
paste(shapes, collapse = " ")
nchar( "Count Me!")
cases <- c("CAPS", "low", "Title")
toupper(cases)
tolower(cases)
regular_expression <- "a"
string_to_search <- "Maryland"
grepl(regular_expression, string_to_search)
grepl("ryla", "Maryland")
grepl("Marly", "Maryland")
head(state.name)
grepl".", "Maryland"
grepl(".", "Maryland")
grepl(".", "")
grepl("a.b", c("aaa", "aab", "abb", "acadb"))
grepl("a+", "Maryland")
grepl("*x", "Maryland")
grepl("x*", "Maryland")
grepl("s{2}", "Mississippi")
grepl("i{2}", "Mississippi")
grepl("i{2,3}", "Mississippi")
grepl("(iss){2}", "Mississippi")
grepl("\\d", "0123456789")
grepl("\\D", "0123456789")
grpl("[aeiou]", "rhythms")
grepl("[aeiou]", "rhythms")
grepl("\\.", "http://www.jhsph.edu/")
grepl("^a", c("bab", "aab"))
grepl("$", c( "bab", "aab"))
grepl("$b", c( "bab", "aab"))
grepl("b$", c( "bab", "aab"))
grepl("a|b", c("abc", "bcd", "cde"))
start_end_vowel <-
| "^[AEIOU]{1}.+[aeiou]{1}$"
start_end_vowel <- "^[AEIOU]{1}.+[aeiou]{1}$"
vowel_state_lgl <- grepl(start_end_vowel, state.name)
state.name[vowel_state_lgl]
grepl("[Ii]", c( "Hawaii", "Illinois", "Kentucky"))
grep("[Ii]", c("Hawaii", "Illinois", "Kentucky"))
sub("[Ii]", "1", c("Hawaii", "Illinois", "Kentucky"))
gsub("[Ii]", "1", c("Hawaii", "Illinois", "Kentucky"))
two_s <- state.name[grep("ss", state.name)]
two_s
strsplit(two_s, "ss")
str_extract("Camaro Z28", "[0-9+]")
str_extract("Camaro Z28", "[0-9]+")
str_order(c("p", "e", "n", "g"))
play()
nxt()
str_pad("Thai", width = 8, side ="left", pad = "-")
str_to_title(c("CAPS", "low", "Title"))
str_trim(" trim me ")
word("See Spot run.", 2)
rnorm(1,0,1)
rnorm(2,c(0,40),c(1,1))
shiny::runApp('Onderwijs/Shiny/Anova-Regression')
runApp('Onderwijs/Shiny/Anova-Regression')
runApp('Onderwijs/Shiny/Anova-Regression')
runApp('Onderwijs/Shiny/Format/Randomization & p-values')
install.packages("png")
runApp('Onderwijs/Shiny/Format/Randomization & p-values')
install.packages("reshape")
runApp('Onderwijs/Shiny/Format/Randomization & p-values')
install.packages("DT")
runApp('Onderwijs/Shiny/Format/Randomization & p-values')
runApp('Onderwijs/Shiny/Anova-Regression')
runApp('Onderwijs/Shiny/Anova-Regression')
runApp('Onderwijs/Shiny/Anova-Regression')
runApp('Onderwijs/Shiny/Anova-Regression')
runApp('Onderwijs/Shiny/Anova-Regression')
runApp('Onderwijs/Shiny/Format/Randomization & p-values')
runApp('Onderwijs/Shiny/Anova-Regression')
runApp('Onderwijs/Shiny/Anova-Regression')
runApp('Onderwijs/Shiny/Anova-Regression')
runApp('Onderwijs/Shiny/Anova-Regression')
ngroups <- 3
mus <- sapply(1:ngroups, function(i){expression(mu[i])})
mus <- sapply(1:ngroups, function(i){expression(mu[paste(i)])})
mus <- sapply(1:ngroups, function(i){paste(expression(mu[paste(i)]))})
plot(rnorm(10), title = mus[1])
plot(rnorm(10), main = mus[1])
mus <- sapply(1:ngroups, function(i){expression(mu[paste(i)])})
plot(rnorm(10), main = mus[1])
mus <- sapply(1:ngroups, function(i){expression(mu[i])})
mus <- sapply(1:ngroups, function(i){bquote(mu[.(i)])})
plot(rnorm(10), main = mus[[1]])
x <- bquote(mu[.(1)])
mus <- sapply(1:ngroups, function(i){c(bquote(mu[.(i)]), bquote(beta[.(i)]))})
mus
plot(rnorm(10), main = mus[[2]])
plot(rnorm(10), main = mus[1,2)
plot(rnorm(10), main = mus[1,2]
)
H0 <- sapply(1:2, function(i){c(paste("H0: ", paste(mus[i,], sep = " = ")),paste("Ha: ", paste(mus[i,], sep = expression("!="))))})
notequal <- expression(!=)
notequal <- expression("!=")
notequal <- paste(expression("!="))
notequal <- expression("!=")
H0 <- sapply(1:2, function(i){c(paste("H0: ", paste(mus[i,], sep = " = ")),paste("Ha: ", paste(mus[i,], sep = notequal)))})
plot(1:10, main = notequal)
plot(1:10, main = expression(!=))
plot(1:10, main = expression(<=))
plot(1:10, main = paste(expression(<=)))
plot(1:10, main = expression(a >= b))
plot(1:10, main = expression(a != b))
notequal <- expression( != )
plot(1:10, main = paste(c(1,2), sep = expression(a != b)))
plot(1:10, main = paste(c(1,2), sep = paste(expression(a != b))))
x<- c(1,2)
y <- c(1,2,3)
paste(x,y)
paste(y,x)
hypgen <- function(ngroups){
mus <- sapply(1:ngroups, function(i){c(bquote(mu[.(i)]), bquote(beta[.(i)]))})
Hyps <- sapply(1:2, function(i){c(paste("H0: ", paste(mus[i,], sep = "=")),paste("Ha: ", paste(mus[i,], sep = ",")))})
Hyps
}
hypgen(3)
i = 2
paste(mus[i,], sep = "=")
mus[1,]
mus <- sapply(1:ngroups, function(i){c(bquote(mu[.(i)]), bquote(beta[.(i)]))})
mus
mus[[1]]
mus[[2]]
x <- mus[1,]
x
x[[]]
x[[1:3]]
x[[1]]
unlist(x)
x
y <- unlist(x)
y
runApp('Onderwijs/Shiny/Anova-Regression')
runApp('Onderwijs/Shiny/Anova-Regression')
runApp('Onderwijs/Shiny/Anova-Regression')
runApp('Onderwijs/Shiny/Anova-Regression')
rnorm(10)
x<-rnorm(10)
x <- sapply(1:2, function(i){c(rnorm(10), i)})
x
shiny::runApp('Onderwijs/Shiny/Anova-Regression')
runApp('Onderwijs/Shiny/Anova-Regression')
shiny::runApp()
install.packages("shinydashboard")
install.packages("DT")
install.packages("ggplot2")
install.packages("tidyr")
install.packages("dplyr")
install.packages("RColorBrewer")
install.packages("gridExtra")
install.packages("highlightHTML")
install.packages("pander")
install.packages("markdown")
install.packages("stringr")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
library(base)
library(utils)
library(stats)
library(graphics)
library(grDevices)
library(methods)
shiny::runApp()
